//Create a table shop
CREATE TABLE IF NOT EXISTS shops(
	ID serial PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	password VARCHAR ( 50 ),
	shop_type VARCHAR (50),
	shop_name VARCHAR ( 255 ) ,
	shop_address VARCHAR ( 255 ) ,
	shop_postcode VARCHAR (10),
	shop_longitutde VARCHAR ( 255 ) ,
	shop_latitude VARCHAR ( 255 ) ,
	shop_crowd_flag INT DEFAULT 1,
	shop_crowd INT DEFAULT 0, 
    shop_status VARCHAR (6) DEFAULT 'open'
);

CREATE TABLE IF NOT EXISTS gas_stations(
	ID serial PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	password VARCHAR ( 50 ),
	station_name VARCHAR ( 255 ) ,
	station_address VARCHAR ( 255 ) ,
	station_longitutde VARCHAR ( 255 ) ,
	station_latitude VARCHAR ( 255 ) ,
	station_crowd INT DEFAULT 0, 
    station_status VARCHAR (6) DEFAULT 'open'
);


//Create a table itemlist
CREATE TABLE IF NOT EXISTS itemlist(
	ID serial PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	shop_type VARCHAR (50),
	shop_name VARCHAR ( 255 ) ,
	shop_address VARCHAR ( 255 ) ,
	shop_postcode VARCHAR (10),
	shop_longitutde VARCHAR ( 255 ) ,
	shop_latitude VARCHAR ( 255 ) ,
	shop_crowd_flag INT DEFAULT 1,
	shop_crowd INT DEFAULT 0, 
    shop_status VARCHAR (6) DEFAULT 'open'
);

//Create a table shop_longitude
CREATE TABLE IF NOT EXISTS shop_longitude(
	ID serial PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	shop_name VARCHAR ( 255 ) ,
	shop_type VARCHAR (50),
	shop_degree VARCHAR(10),
	shop_minute VARCHAR(10),
	shope_second VARCHAR(10)
);

//Create a table shop_latitide
CREATE TABLE IF NOT EXISTS shop_latitude(
	ID serial PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	shop_type VARCHAR (50),
	shop_name VARCHAR ( 255 ) ,
	shop_degree VARCHAR(10),
	shop_minute VARCHAR(10),
	shope_second VARCHAR(10)
);

 sudo -i -u postgres
 psql TestSaveCoinDB


   

        "INSERT INTO  shops (username,password,shop_name,shop_address,shop_longitutde,shop_latitude,shop_crowd,shop_status ) VALUES (?,?,?,?,?,?,?,?)
                



package com.saveMoney;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

public class main {


	@SpringBootApplication
	public class Application {
		@Autowired
//	    private JdbcTemplate jdbcTemplate;

		public static void main(String[] args) {
			SpringApplication.run(Application.class, args);
			System.out.println("hi Spring!!!");
			
//			
//			  String sql = "INSERT INTO students (name, email) VALUES ("
//		                + "'Nam Ha Minh', 'nam@codejava.net')";
////		         
////		        int rows = jdbcTemplate.update(sql);
//		        if (rows > 0) {
//		            System.out.println("A new row has been inserted.");
//		        }

	    }
	}


}




#application port
#server.port=8080

#DB config
#spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
#spring.datasource.url=jdbc:postgresql://aaa22i97zuwq70.cn1e1en5miak.us-east-1.rds.amazonaws.com:5432/postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/TestSaveCoinDB
spring.datasource.username=postgres
spring.datasource.password=
spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# maximum allowed file size
#max.file.size=5242880

# desired file formats
#accepted.file.formats=pdf|docx

